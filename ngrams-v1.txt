

/*


var NG_SEP = "="; // UsedNG_SEPtoNG_SEPseparateNG_SEPwordsNG_SEPinNG_SEPanNG_SEPNgram
		// eg. "So=the=text=of=an=Ngram=looks=like=this"
var NG_MAX_DEGREE = 3 ;

// ---------- setup re: source-texts to use
//
var IgnoreWords = [ "the","a","these","those", "etc" ];
// qqq--what about punctuation??

var WordList_2 = [ 
"of", "nuclear", "energy", "in", "1945",
"and", "the", "arrival", "of", "the", "ﬂying", "saucers"
];

var WordList_1 = [ "My", "observation", "of", "the", "Universe", 
"convinces", "me", "that", 
"there", "are", "beings",
"of", "intelligence", "and", "power", "of", 
"a", "far", "higher", "quality", "than", "anything", "we",
"can", "conceive", "of", "as", "human;", "that", "they", 
"are", "not", "necessarily", "based", "on", "the",
"cerebral", "and", "nervous", "structures", "that", "we", 
"know;", "that", "is,", "the", "human",
"ones", "that", "existed", "before", "the", "unleashing", 
"of", "nuclear", "energy", "in", "1945",
"and", "the", "arrival", "of", "the", "ﬂying", "saucers", 
"in", "I", "94", "7", "period,", "before", "the", "20",
"C", "zeitgeist", "was", "thoroughly", "recoded;", "and", 
"that", "the", "one", "and", "only",
"chance", "for", "mankind", "to", "advance", "as", "a", 
"whole", "is", "for", "individuals", "to", "make",
"contact", "with", "such", "beings" ];



// CONSTRUCTOR for:  WordSource
//
function WordSource() { 
	this.there_is_more = false;
	this.wordSeparator = " " ; // ??
	this.ws_index = 0;
	this.theWordSource = null;
	this.init = function( wordListSpec ) { 
		this.theWordSource = wordListSpec ;
		this.ws_index = 0; this.there_is_more = true; 
	} 

	this.reset = function( wordListSpec ) { this.init(wordListSpec) }
	this.hasMore = function() { return this.there_is_more } 
	this.nextWord = function() { 
		if ( ! this.hasMore() ) return "";
		var the_nextWord = "";

		// FOR TESTING---- return a entry from WordList_1
		// SHOULD BE-- a file
		the_nextWord = WordList_1[this.ws_index] ;

		// -----------------------------
		// set state re: next iteration
		this.ws_index++ ;
		if ( this.ws_index >= WordList_1.length ) { this.there_is_more = false; }
		// -----------------------------

		return the_nextWord ;
	} 
	this.nextNgram = function() { return "no-ngrams" } 
	this.show = function() { return "<string view of WordSource>" }
}
var ws = new WordSource(); 

// TESTS for-------> WordSource
/*
var wst = new WordSource(); 
wst.init( WordList_1 );
wst.hasMore()
wst.nextWord()
wst.nextWord()
wst.nextWord()
wst.nextWord()
*/


/*
var wt2 = new WordSource(); 
wt2.init( WordList_2 );
while ( wt2.hasMore() ) {
	var w = wt2.nextWord()
	show( "NextWord: " + w )
}
show( "== iter-test 1 -- end of WordList_2 ==" );
show( "== reset and do it again-- WordList_2 ==" );
wt2.reset( WordList_2 );
while ( wt2.hasMore() ) {
	var w = wt2.nextWord()
	show( "NextWord: " + w )
}
show( "== iter-test 2 -- end of WordList_2 ==" );

*/

// CONSTRUCTOR for:  Ngram
//
function Ngram(text, count, degree) { 
	this.text = text; 
	this.count=count; 
	this.degree=degree ;
	this.incr_count = function() { this.count += 1; return this.count; }
	this.incr_degree = function() { this.degree += 1; return this.degree; }
	this.decompose = function() { return(this.text).split( NG_SEP ); }
};

// TESTS for Ngram
/*
var ng1 = new Ngram("a=a=a",1,3);
var ng2 = new Ngram("a=a",1,2);
var ng3 = new Ngram("a",1,1);
*/


function buildNgram_text( wordList )
{
	var ngt = ""; // n-gram text to build and return

	for( var i=0; i<NG_MAX_DEGREE; i++ ) {
		if ( ws.next() 
	}
	return ngt;
}


++++++++++++++++++++++++++++++++



	Ngram = {
		text: "",
		nextWord = function() {
		}
	};
	var ng = new Ngram();

	NgramEntry = { text: "", count: 0 };

	function Corpus() = {
		Ngrams = [] ;	// array of NgramEntry
		processNgram = function() {
			// process an Ngram into a Corpus
		}
	}
	var c = new Corpus();


	// ========== primary proessing ===============

	ws.init() ;

	while ( ws.hasMore() ) {
	ng = ws.getnextNgram ;

	ng.show();

	c.consumeNGram(ng) ;
	c.show();
	}

	show( "WordSource complete------" );
	show( "Corpus looks like:-----" );
		
	


	
	

*/
